
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


#define SHIFT_L 1
#define PROG_L  2
#define LOWER_L 3
#define MAGIC_L 4

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER_L>, <&to LOWER_L>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

    shift: my_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "MY_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo SHIFT_L>, <&caps_word>;
        };

    ae: my_ae {
            label = "ae";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp KP_N1>
                , <&macro_tap &kp KP_N3>
                , <&macro_tap &kp KP_N2>
                , <&macro_release &kp RALT>
                ;
    };

    oe: my_oe {
            label = "oe";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                =  <&macro_press &kp RALT>
                , <&macro_tap &kp KP_N1>
                , <&macro_tap &kp KP_N4>
                , <&macro_tap &kp KP_N8>
                , <&macro_release &kp RALT>
                ;
    };

    ue: my_ue {
            label = "ue";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                =  <&macro_press &kp RALT>
                , <&macro_tap &kp KP_N1>
                , <&macro_tap &kp KP_N2>
                , <&macro_tap &kp KP_N9>
                , <&macro_release &kp RALT>
                ;
    };

   /* rshift: my_shift_r {
            compatible = "zmk,behavior-tap-dance";
            label = "MY_SHIFT_R;
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHIFT>, <&caps_word>;
        }; */

    hm: homerow_mods_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_KP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

    hml: homerow_mods_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_ML";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };


 
    combos {
            compatible = "zmk,combos";
            combo_prog_l1 {
                timeout-ms = <100>;
                key-positions = <69 70>;
                bindings = <&mo PROG_L>;
            };
            combo_prog_l2 {
                timeout-ms = <100>;
                key-positions = <73 74>;
                bindings = <&mo PROG_L>;
            };
            combo_prog_l2_v2 {
                timeout-ms = <100>;
                key-positions = <69 74>;
                bindings = <&mo PROG_L>;
            };

        };
    
    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
    &kp F1      &kp F2  &kp C_PREV      &kp C_PP      &kp C_NEXT                                                                                                     &kp K_MUTE     &kp K_VOL_DN     &kp K_VOL_UP  &kp F3      &kp F4      
    &none       &kp N1  &kp N2      &kp N3      &kp N4      &kp N5                                                                                      &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp SS
    &kp TAB     &kp Q   &kp W       &kp E       &kp R       &kp T                                                                                       &kp Z      &kp U       &kp I       &kp O       &kp P       &kp PLUS
    &kp ESC     &kp A   &kp S       &kp D       &kp F       &hm LALT G                                                                                  &hm RALT H  &kp J       &kp K       &kp L       &kp QMARK   &kp HASH
    &kp LT      &kp Y   &kp X       &kp C       &kp V       &kp B       &hm LGUI LBRC   &hm LALT LPAR   &kp LBKT   &lower    &mo LOWER_L    &kp RGUI       &kp N       &kp M       &kp COMMA   &kp DOT     &kp MINUS   &kp PG_UP
    &magic MAGIC_L 0  &shift  &kp SEMI    &kp LEFT    &kp RIGHT               &hm LCTRL SPACE  &kp BSPC        &kp RET    &kp LT      &kp DEL  &hm RCTRL ENTER              &kp DOWN      &kp UP    &kp LBKT    &shift      &kp PG_DN
            >;
        }; 

        shift_layer {
            bindings = <
    &kp F1      &kp F2      &kp F7      &kp F8          &kp F9                                                                                                                  &kp F3      &kp F4      &kp F10     &kp F11     &kp F12
    &none       &kp RS(N1)  &kp RS(N2)  &kp RS(N3)      &kp RS(N4)      &kp RS(N5)                                                                                          &kp LS(N6)      &kp LS(N7)      &kp LS(N8)      &kp LS(N9)      &kp LS(N0)      &kp SS
    &kp RS(TAB) &kp RS(Q)   &kp RS(W)   &kp RS(E)       &kp RS(R)       &kp RS(T)                                                                                       &kp LS(Z)       &kp LS(U)       &kp LS(I)       &kp LS(O)       &kp LS(P)       &kp STAR
    &kp RS(ESC) &kp RS(A)   &kp RS(S)   &kp RS(D)       &kp RS(F)       &hm LALT RS(G)                                                                                  &hm RALT LS(H)  &kp LS(J)  &kp LS(K)  &kp LS(L)       &kp QMARK   &kp SQT
    &kp GT      &kp RS(Y)   &kp RS(X)   &kp RS(C)       &kp RS(V)       &kp RS(B)   &hm LCTRL RBRC  &hm LALT RPAR   &kp RBKT   &lower    &mo LOWER_L    &kp RCTRL       &kp LS(N)       &kp LS(M)       &kp SEMICOLON   &kp COLON     &kp LS(MINUS)   &kp PG_UP
    &magic MAGIC_L 0 &shift &kp SEMI    &kp RS(LEFT)    &kp RS(RIGHT)               &hm LGUI SPACE  &kp BSPC        &kp RET    &kp GT      &kp DEL  &hm RGUI ENTER              &kp LS(UP)      &kp LS(DOWN)    &kp LBKT    &shift      &kp PG_DN
            >;
        }; 

        layer_programming {
            bindings = <
 &trans  &trans             &trans      &trans    &trans                                                                            &trans      &trans  &trans  &trans  &trans
 &trans  &trans             &trans      &trans    &trans    &trans                                                      &trans      &trans      &trans  &trans  &trans  &trans
 &trans  &kp EXCLAMATION    &kp DQT     &kp AMPS  &kp DLLR  &kp PRCNT                                                   &trans      &kp SLASH   &trans  &trans  &trans  &ue
 &trans  &kp EQUAL          &kp SQT     &kp LBRC  &kp LBKT  &kp LPAR                                                    &trans      &kp PIPE    &trans  &kp AT  &oe     &ae
 &trans  &kp GT             &kp GRAVE   &kp RBRC  &kp RBKT  &kp RPAR    &trans  &trans  &trans  &trans  &trans  &trans  &kp TILDE   &kp BSLH    &trans  &kp EURO &trans &trans
 &trans  &kp LT             &trans      &trans    &trans                &trans  &trans  &trans  &trans  &trans  &trans              &trans      &trans  &trans  &trans  &trans
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &to 0              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic MAGIC_L 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
      &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
